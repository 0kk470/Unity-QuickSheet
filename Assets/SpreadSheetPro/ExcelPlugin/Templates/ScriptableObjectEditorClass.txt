using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Data.Excel;

///
/// !!! Machine generated code !!!
///
[CustomEditor(typeof($WorkSheetClassName))]
public class $ClassName : BaseExcelEditor<$WorkSheetClassName>
{	
	public override void OnEnable()
	{
		base.OnEnable();
		
		$WorkSheetClassName data = target as $WorkSheetClassName;
		
		databaseFields = ExposeProperties.GetProperties(data);
		
		foreach($DataClassName e in data.dataArray)
		{
		    dataFields = ExposeProperties.GetProperties(e);
			pInfoList.Add(dataFields);
		}
	}
	
	public override void OnInspectorGUI()
	{
		base.OnInspectorGUI();
		
		//DrawDefaultInspector();
		if (GUI.changed)
		{
			pInfoList.Clear();
			
			$WorkSheetClassName data = target as $WorkSheetClassName;
			foreach($DataClassName e in data.dataArray)
			{
				dataFields = ExposeProperties.GetProperties(e);
				pInfoList.Add(dataFields);
			}
			
			EditorUtility.SetDirty(target);
			Repaint();
		}
	}
	
	public override bool Load()
	{

		$WorkSheetClassName targetData = target as $WorkSheetClassName;
		
		var excel = ExcelReader.Open (targetData.sheetName);	

		List<$DataClassName> myDataList = new List<$DataClassName>();

		var serializer = new Serializer<$DataClassName>();
		Row[] row = excel.ReadData();
		for(int i=0; i<row.Length; i++)
		{
			$DataClassName data = new $DataClassName();
			data = serializer.Deserialize(row[i]);

			myDataList.Add(data);
		}
	
		targetData.dataArray = myDataList.ToArray();
		
		EditorUtility.SetDirty(targetData);
		AssetDatabase.SaveAssets();
		
		return true;
	}
}
